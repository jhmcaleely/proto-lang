// Yarg implementation of Conway's Life
// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
//
// A 2D matrix of cells, which contain a running instance
// of Conway's Life.
//
// The neighbourhood (n) around a cell (c) is consulted to
// see if the cell should maintain or change state
//
// nnn
// ncn
// nnn

// characters handing for ascii state reports
var live = 1;
var dead = 0;

var columns = 0;
var rows = 0;

var seed = 0d4;

fun rand() {

    // https://github.com/kraj/uClibc/blob/master/libc/stdlib/rand_r.c#L25

    var next = seed;
    var result;

    next = next * 0d1103515245;
    next = next + 0d12345;
    result = (next / 0d65536) % 0d2048;

    next = next * 0d1103515245;
    next = next + 0d12345;
    result = result << 0d10;
    result = result ^ ((next / 0d65536) % 0d1024);

    next = next * 0d1103515245;
    next = next + 0d12345;
    result = result << 0d10;
    result = result ^ ((next / 0d65536) % 0d1024);

    seed = next;
    return next;
}

fun random_state() {

    if (rand() > 0d4294967295 / 0d2) {
        return 0;
    }
    else {
        return 1;
    }
}

fun make_row(cols) {
    var row = make_array(cols);
    for (var i = 0; i < cols; i = i + 1) {
        row[i] = nil;
    }
    return row;
}

fun make_world(cols, lines) {
    columns = cols;
    rows = lines;

    var col = make_array(lines);
    for (var i = 0; i < cols; i = i + 1) {
        col[i] = make_row(cols);
    }
    return col;
}

fun randomState(world) {
    for (var c = 0; c < col_count(world); c = c + 1) {
        for (var r = 0; r < row_count(world); r = r + 1) {
            world[c][r] = random_state();
        }
    }
}

fun row_count(world) {
    return rows;
}

fun col_count(world) {
    return columns;
}

fun get_cell(world, x, y) {
    return world[y][x];
}

fun set_cell(world, x, y, state) {
    world[y][x] = state;
}

fun count(array, val, array_len) {
    var result = 0;
    for (var i = 0; i < array_len; i = i + 1) {
        if (array[i] == val) {
            result = result + 1;
        }
    }
    return result;
}

fun next_state(state, neighbourhood) {
    var new_state = dead;
    var alive_neighbours = count(neighbourhood, live, 8);
    
    if (state == live and (alive_neighbours == 2 or alive_neighbours == 3)) {
        new_state = live;
    }
    else if (state == dead and alive_neighbours == 3) {
        new_state = live;
    }

    return new_state;
}

fun next_generation(world) {
    var next_gen = make_world(columns, rows);
    for (var l = 0; l < row_count(world); l = l + 1) {
        for (var c = 0; c < col_count(world); c = c + 1) {
            var neighbourhood = neighbours(world, l, c);
            var state = get_cell(world, l, c);
            next_gen[c][l] = next_state(state, neighbourhood);
        }
    }

    return next_gen;
}


fun adjacent_line(world, line, col) {
    var adjline = make_array(3);
    var index = 0;
    for (var x = -1; x < 2; x = x + 1) {
        adjline[index] = line[(col + x) % col_count(world)];
        index = index + 1;
    }
    return adjline;
}

fun neighbours(world, line, col) {
    var n = make_array(8);
    var col_c = col_count(world);
    var row_c = row_count(world);

    var adjacentLine = adjacent_line(world, world[(line - 1) % row_c], col);
    
    for (var x = 0; x < 3; x = x + 1) {
        n[x] = adjacentLine[x];
    }

    n[3] = get_cell(world, (col-1) % col_c, line);
    n[4] = get_cell(world, (col+1) % col_c, line);

    adjacentLine = adjacent_line(world, world[(line + 1) % row_c], col);

    var index = 0;
    for (var x = 5; x < 8; x = x + 1) {
        n[x] = adjacentLine[index];
        index = index + 1;
    }

    return n;
}

fun printWorld(world) {
    print "--";
    for (var c = 0; c < col_count(world); c = c + 1) {
        for (var r = 0; r < row_count(world); r = r + 1) {
            print world[c][r];
        }
        print "-";
    }
    print "--";
}


var conwayWorld = make_world(5, 5);
printWorld(conwayWorld);
randomState(conwayWorld);
printWorld(conwayWorld);

var nextWorld = next_generation(conwayWorld);
//printWorld(nextWorld);

conwayWorld = nextWorld;
printWorld(conwayWorld);